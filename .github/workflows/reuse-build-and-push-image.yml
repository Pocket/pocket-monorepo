name: 'Re-usable Docker Build Flow'
on:
  workflow_call:
    inputs:
      scope:
        description: 'Turbo Repo scope to run the build for'
        required: false
        default: ''
        type: string
      docker-repo-name-pattern:
        description: 'Docker name of the repo, usually: servicename-{0}-app. {0} is replaced with dev or prod'
        required: true
        type: string
      development-aws-registry:
        description: 'AWS Development Account Id'
        type: string
        default: 410318598490.dkr.ecr.us-east-1.amazonaws.com
      production-aws-registry:
        description: 'AWS Development Account Id'
        type: string
        default: 996905175585.dkr.ecr.us-east-1.amazonaws.com
      context:
        description: 'The path of where the application should be built from'
        required: false
        default: '.'
        type: string
      app-path:
        description: 'The path of where the application is located in the monorepo ie servers/<app-name>'
        required: false
        default: ''
        type: string
      app-port:
        description: 'The port the application runs on ie 4006'
        required: false
        default: 80
        type: number
      sentry-org:
        description: 'The org name used in sentry. Used to upload source maps'
        required: false
        type: string
        default: pocket
      sentry-project:
        description: 'The project name used in sentry. Used to upload source maps'
        required: false
        default: ''
        type: string
      terraform-output:
        description: 'The terraform output which is used to get the ECS_Service and Task Defintion arns for codedeploy'
        required: false
        type: string
      archive-download-name:
        description: 'If specified, download this archive instead of checkout'
        required: false
        type: string
        default: ''

permissions:
  contents: read  # This is required for actions/checkout
  id-token: write  # Access the Github JWT for AWS access
  deployments: write

jobs:
    # Let's build the image on every pull request just like we would on production
    pull-request:
      # Only run this job on a pull request event
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          if: inputs.archive-download-name == ''
          uses: actions/checkout@v4   
        - name: Archive download
          if: inputs.archive-download-name != ''
          uses: actions/download-artifact@v4
          with:
              name: ${{inputs.archive-download-name}}
        - name: Build Docker Image
          uses: ./.github/actions/containerize
          with:
            docker-repo-name: "${{inputs.development-aws-registry }}/${{ format(inputs.docker-repo-name-pattern, 'dev') }}"
            app-path: ${{inputs.app-path}}
            app-port: ${{inputs.app-port}}
            context: ${{inputs.context}}
            sentry-project: ${{inputs.sentry-project}}
            sentry-org: ${{inputs.sentry-org}}
            sentry-token: ${{secrets.SENTRY_BEARER}}
            dockerhub-username: ${{secrets.DOCKERHUB_USERNAME}}
            dockerhub-token: ${{secrets.DOCKERHUB_TOKEN}}
            scope: ${{inputs.scope}}


    development:
      if: github.ref == 'refs/heads/dev'
      runs-on: ubuntu-latest
      steps:        
        - name: Checkout
          if: inputs.archive-download-name == ''
          uses: actions/checkout@v4   
        - name: Archive download
          if: inputs.archive-download-name != ''
          uses: actions/download-artifact@v4
          with:
              name: ${{inputs.archive-download-name}}
        # Get the AWS credentials
        - name: AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: us-east-1
            # TODO: Change this to the right roles when setup
            role-to-assume: arn:aws:iam::410318598490:role/GithubTesting-Daniel
        - name: Build and Push Development Docker Image
          id: dev-docker-build
          uses: ./.github/actions/containerize
          with:
            docker-repo-name: "${{inputs.development-aws-registry }}/${{ format(inputs.docker-repo-name-pattern, 'dev') }}"
            app-path: ${{inputs.app-path}}
            app-port: ${{inputs.app-port}}
            context: ${{inputs.context}}
            sentry-project: ${{inputs.sentry-project}}
            sentry-org: ${{inputs.sentry-org}}
            sentry-token: ${{secrets.SENTRY_BEARER}}
            dockerhub-username: ${{secrets.DOCKERHUB_USERNAME}}
            dockerhub-token: ${{secrets.DOCKERHUB_TOKEN}}
            scope: ${{inputs.scope}}
            push: true
        - name: Code Deploy Docker Image
          uses: ./.github/actions/ecs-codedeploy
          if: fromJSON(inputs.terraform-output).ecs-task-containerName.value != ''
          with:
            docker-image-name: ${{steps.dev-docker-build.outputs.docker-image-name}}
            terraform-output: ${{ inputs.terraform-output }}
            name: ${{inputs.scope}}

    production:
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          if: inputs.archive-download-name == ''
          uses: actions/checkout@v4   
        - name: Archive download
          if: inputs.archive-download-name != ''
          uses: actions/download-artifact@v4
          with:
              name: ${{inputs.archive-download-name}}
        # Get the AWS credentials
        - name: AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: us-east-1
            # TODO: Change this to the right roles when setup
            role-to-assume: arn:aws:iam::410318598490:role/GithubTesting-Daniel
        - name: Build and Push Production Docker Image
          id: prod-docker-build
          uses: ./.github/actions/containerize
          with:
            docker-repo-name: "${{inputs.production-aws-registry }}/${{ format(inputs.docker-repo-name-pattern, 'prod') }}"
            app-path: ${{inputs.app-path}}
            app-port: ${{inputs.app-port}}
            context: ${{inputs.context}}
            sentry-project: ${{inputs.sentry-project}}
            sentry-org: ${{inputs.sentry-org}}
            sentry-token: ${{secrets.SENTRY_BEARER}}
            dockerhub-username: ${{secrets.DOCKERHUB_USERNAME}}
            dockerhub-token: ${{secrets.DOCKERHUB_TOKEN}}
            scope: ${{inputs.scope}}
            push: true
        - name: Code Deploy Docker Image
          uses: ./.github/actions/ecs-codedeploy
          if: fromJSON(inputs.terraform-output).ecs-task-containerName.value != ''
          with:
            docker-image-name: ${{steps.prod-docker-build.outputs.docker-image-name}}
            terraform-output: ${{ inputs.terraform-output }}
            name: ${{inputs.scope}}