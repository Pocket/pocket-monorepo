extend schema
 @link(url: "https://specs.apollo.dev/federation/v2.6", import: ["@key", "@requiresScopes", "@requires", "@shareable", "@composeDirective"])
 @link(url: "https://myspecs.dev/myDirective/v1.0", import: ["@constraint"])
 @composeDirective(name: "@constraint")

scalar ISOString
scalar ValidUrl
scalar Markdown
scalar ProseMirrorJson

"""
A Note is an entity which may contain extracted components
from websites (clippings/snippets), user-generated rich text content,
and may be linked to a source url.
"""
type Note @key(fields: "id") {
  """
  This Note's identifier
  """
  id: ID!
  """
  Title of this note
  """
  title: String
  """
  JSON representation of a ProseMirror document
  """
  docContent: ProseMirrorJson
  """
  Markdown preview of the note content for summary view.
  """
  contentPreview: Markdown
  """
  When this note was created
  """
  createdAt: ISOString!
  """
  When this note was last updated
  """
  updatedAt: ISOString!
  """
  The SavedItem entity this note is attached to (either directly
  or via a Clipping, if applicable)
  """
  savedItem: SavedItem
  """
  The URL this entity was created from (either directly or via
  a Clipping, if applicable).
  """
  source: ValidUrl
  """
  Whether this Note has been marked as archived (hide from default view).
  """
  archived: Boolean!
  """
  Whether this Note has been marked for deletion (will be eventually
  removed from the server). Clients should delete Notes from their local
  storage if this value is true.
  """
  deleted: Boolean!
}

type SavedItem @key(fields: "url") {
  """The URL of the SavedItem"""
  url: String!
  """
  The notes associated with this SavedItem, optionally
  filtered to retrieve after a 'since' parameter.
  """
  notes(
    pagination: PaginationInput,
    sort: NoteSortInput,
    filter: SavedItemNoteFilterInput
  ): NoteConnection!
}

"""Information about pagination in a connection."""
type PageInfo
  @shareable
{
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}


"""The connection type for Note."""
type NoteConnection {
  """A list of edges."""
  edges: [NoteEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of Notes in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type NoteEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The Note at the end of the edge."""
  node: Note
}

"""
Pagination request. To determine which edges to return, the connection
evaluates the `before` and `after` cursors (if given) to filter the
edges, then evaluates `first`/`last` to slice the edges (only include a
value for either `first` or `last`, not both).
The max allowed limit for `first`/`last` is 100. The server would reset
this values to 100 if the request has `first`/`last` set greater than 100.
If all fields are null, by default will return a page with the first 30 elements.
"""
input PaginationInput {
  """
  Returns the elements in the list that come after the specified cursor.
  The specified cursor is not included in the result.
  """
  after: String
  """
  Returns the elements in the list that come before the specified cursor.
  The specified cursor is not included in the result.
  """
  before: String
  """
  Returns the first _n_ elements from the list. Must be a non-negative integer.
  If `first` contains a value, `last` should be null/omitted in the input.
  """
  first: Int
  """
  Returns the last _n_ elements from the list. Must be a non-negative integer.
  If `last` contains a value, `first` should be null/omitted in the input.
  """
  last: Int
}

"""
Possible values for sort ordering (ascending/descending)
"""
enum NoteSortOrder {
 ASC
 DESC
}


"""
Enum to specify the sort by field (these are the current options, we could add more in the future)
"""
enum NoteSortBy {
 CREATED_AT
 UPDATED_AT
}


"""
Input to sort fetched Notes. If unspecified, defaults to UPDATED_AT, DESC.
"""
input NoteSortInput {
 """The field by which to sort Notes"""
 sortBy: NoteSortBy!
 """The order in which to sort Notes"""
 sortOrder: NoteSortOrder!
}

"""Filter for retrieving Notes"""
input NoteFilterInput {
  """
  Filter to show notes which are attached to a source URL
  directly or via clipping, or are standalone
  notes. If not provided, notes will not be filtered by source url.
  """
  isAttachedToSave: Boolean
  """
  Filter to retrieve Notes by archived status (true/false).
  If not provided, notes will not be filtered by archived status.
  """
  archived: Boolean
  """
  Filter to retrieve notes after a timestamp, e.g. for syncing.
  """
  since: ISOString
  """
  Filter to choose whether to include notes marked for server-side
  deletion in the response (defaults to false).
  """
  excludeDeleted: Boolean
}

"""Filter for retrieving Notes attached to a SavedItem"""
input SavedItemNoteFilterInput {
  """
  Filter to retrieve Notes by archived status (true/false).
  If not provided, notes will not be filtered by archived status.
  """
  archived: Boolean
  """
  Filter to retrieve notes after a timestamp, e.g. for syncing.
  """
  since: ISOString
  """
  Filter to choose whether to include notes marked for server-side
  deletion in the response (defaults to false).
  """
  excludeDeleted: Boolean
}


type Query {
  """Retrieve a specific Note"""
  note(id: ID!): Note @requiresScopes(scopes: [["ROLE_USER"]])
  """Retrieve a user's Notes"""
  notes(sort: NoteSortInput, filter: NoteFilterInput, pagination: PaginationInput): NoteConnection @requiresScopes(scopes: [["ROLE_USER"]])
}


"""
Input to create a new Note
"""
input CreateNoteInput {
  """Optional title for this Note"""
  title: String
  """
  Client-provided UUID for the new Note.
  If not provided, will be generated on the server.
  """
  id: ID
  """
  Optional URL to link this Note to.
  """
  source: ValidUrl
  """
  JSON representation of a ProseMirror document
  """
  docContent: ProseMirrorJson!
  """
  When this note was created. If not provided, defaults to server time upon
  receiving request.
  """
  createdAt: ISOString
}

"""
Input to create a new Note seeded with copied content from a page.
The entire content becomes editable and is not able to be "reattached"
like a traditional highlight.
"""
input CreateNoteFromQuoteInput {
  """Optional title for this Note"""
  title: String
  """
  Client-provided UUID for the new Note.
  If not provided, will be generated on the server.
  """
  id: ID
  """
  The Web Resource where the quote is taken from.
  This should always be sent by the client where possible,
  but in some cases (e.g. copying from mobile apps) there may
  not be an accessible source url.
  """
  source: ValidUrl
  """
  JSON representation of a ProseMirror document, which
  contains the formatted snipped text. This is used to seed
  the initial Note document state, and will become editable.
  """
  quote: ProseMirrorJson!
  """
  When this note was created. If not provided, defaults to server time upon
  receiving request.
  """
  createdAt: ISOString
}

input EditNoteTitleInput {
  """The ID of the note to edit"""
  id: ID!
  """The new title for the note (can be an empty string)"""
  title: String! @constraint(maxLength: 100)
  """
  When the update was made. If not provided, defaults to the server
  time upon receiving request.
  """
  updatedAt: ISOString
}
"""
Input for editing the content of a Note (user-generated)
"""
input EditNoteContentInput {
  """
  The ID of the note to edit
  """
  noteId: ID!
  """
  JSON representation of a ProseMirror document
  """
  docContent: ProseMirrorJson!
  """
  The time this update was made (defaults to server time)
  """
  updatedAt: ISOString
}

input DeleteNoteInput {
  """The ID of the note to delete"""
  id: ID!
  """
  When the note was deleted was made. If not provided, defaults to
  the server time upon receiving request.
  """
  deletedAt: ISOString
}

input ArchiveNoteInput {
  """
  The ID of the note to archive or unarchive
  (depends on mutation).
  """
  id: ID!
  """
  When the note was archived or unarchived. 
  If not provided, defaults to the server time upon
  receiving request.
  """
  updatedAt: ISOString
}

type Mutation {
  """
  Create a new note, optionally with title and content
  """
  createNote(input: CreateNoteInput!): Note! @requiresScopes(scopes: [["ROLE_USER"]])
  """
  Create a new note, with a pre-populated block that contains the quoted and cited text
  selected by a user.
  """
  createNoteFromQuote(input: CreateNoteFromQuoteInput!): Note! @requiresScopes(scopes: [["ROLE_USER"]])
  """
  Edit the title of a Note.
  If the Note does not exist or is inaccessible for the current user,
  response will be null and a NOT_FOUND error will be included in the
  errors array.
  """
  editNoteTitle(input: EditNoteTitleInput!): Note @requiresScopes(scopes: [["ROLE_USER"]])
  """
  Edit the content of a Note.
  If the Note does not exist or is inaccessible for the current user,
  response will be null and a NOT_FOUND error will be included in the
  errors array.
  """
  editNoteContent(input: EditNoteContentInput!): Note @requiresScopes(scopes: [["ROLE_USER"]])
  """
  Delete a note and all attachments. Returns True if the note was successfully
  deleted. If the note cannot be deleted or does not exist, returns False. 
  Errors will be included in the errors array if applicable.
  """
  deleteNote(input: DeleteNoteInput!): ID! @requiresScopes(scopes: [["ROLE_USER"]])
  """
  Archive a note.
  If the Note does not exist or is inaccessible for the current user,
  response will be null and a NOT_FOUND error will be included in the
  errors array.
  """
  archiveNote(input: ArchiveNoteInput!): Note @requiresScopes(scopes: [["ROLE_USER"]])
  """
  Unarchive a note.
  If the Note does not exist or is inaccessible for the current user,
  response will be null and a NOT_FOUND error will be included in the
  errors array.
  """
  unArchiveNote(input: ArchiveNoteInput!): Note @requiresScopes(scopes: [["ROLE_USER"]])
}
