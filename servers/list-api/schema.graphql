extend schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: ["@key", "@composeDirective", "@tag", "@shareable"]
  )
  # The link directive is required to federate @constraint
  # It doesn't actually have to be a real spec, but it would be good
  # to write one and replace this.
  @link(url: "https://myspecs.dev/myDirective/v1.0", import: ["@constraint"])
  @composeDirective(name: "@constraint")

"""
ISOString scalar - all datetimes fields are Typescript Date objects on this server &
returned as ISO-8601 encoded date strings (e.g. ISOString scalars) to GraphQL clients.
See Section 5.6 of the RFC 3339 profile of the ISO 8601 standard: https://www.ietf.org/rfc/rfc3339.txt.
"""
scalar ISOString

scalar Url

type SyncConflict implements BaseError {
  path: String!
  message: String!
}

type NotFound implements BaseError {
  path: String!
  message: String!
  key: String
  value: String
}

interface BaseError {
  path: String!
  message: String!
}

"""
Interface that all state based entities must implement
"""
interface RemoteEntity {
  """
  For tags entity, id denotes the unique tag Id.
  For savedItems, id denotes the itemId.
  Along with the userId provided in the header, we will use id to fetch savedItems/tags for the user.
  """
  id: ID!
  """
  Unix timestamp of when the entity was created
  """
  _createdAt: Int
  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int
  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int
  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}

"""
Information about pagination in a connection.
"""
type PageInfo @shareable {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Pagination request. To determine which edges to return, the connection
evaluates the `before` and `after` cursors (if given) to filter the
edges, then evaluates `first`/`last` to slice the edges (only include a
value for either `first` or `last`, not both).
The max allowed limit for `first`/`last` is 100. The server would reset
this values to 100 if the request has `first`/`last` set greater than 100.
If all fields are null, by default will return a page with the first 30 elements.
"""
input PaginationInput {
  """
  Returns the elements in the list that come after the specified cursor.
  The specified cursor is not included in the result.
  """
  after: String
  """
  Returns the elements in the list that come before the specified cursor.
  The specified cursor is not included in the result.
  """
  before: String
  """
  Returns the first _n_ elements from the list. Must be a non-negative integer.
  If `first` contains a value, `last` should be null/omitted in the input.
  """
  first: Int
  """
  Returns the last _n_ elements from the list. Must be a non-negative integer.
  If `last` contains a value, `first` should be null/omitted in the input.
  """
  last: Int
}

input SaveUpdateTagsInput {
  saveId: ID!
  """
  Tags to remove, by ID
  """
  removeTagIds: [ID!]! @constraint(maxItems: 30)
  """
  Tags to add, by name text; if a Tag
  with the given name does not exist,
  one will be created.
  """
  addTagNames: [String!]! @constraint(maxItems: 30)
}

type CorpusItem @key(fields: "url") {
  url: Url!

  """
  The user's saved item, from the Corpus Item, if the corpus item was saved to the user's saves
  """
  savedItem: SavedItem
}

"""
Represents a Pocket Item that a user has saved to their list.
(Said otherways, indicates a saved url to a users list and associated user specific information.)
"""
type SavedItem implements RemoteEntity @key(fields: "id") @key(fields: "url") {
  """
  The url the user saved to their list
  """
  url: String!
  """
  The title for user saved item. Set by the user and if not, set by the parser.
  For third party clients use-case only.
  """
  title: String
    @deprecated(reason: "internal clients must use item.title")
    @tag(name: "alpha")
  """
  Helper property to indicate if the SavedItem is favorited
  """
  isFavorite: Boolean!
  """
  Timestamp that the SavedItem became favorited, null if not favorited
  """
  favoritedAt: Int
  """
  Helper property to indicate if the SavedItem is archived
  """
  isArchived: Boolean!
  """
  Timestamp that the SavedItem became archied, null if not archived
  """
  archivedAt: Int
  """
  Link to the underlying Pocket Item for the URL
  """
  item: ItemResult!
  """
  The Tags associated with this SavedItem
  """
  tags: [Tag!]
  """
  The Suggested Tags associated with this SavedItem, if the user is not premium or there are none, this will be empty.
  """
  suggestedTags: [Tag!]
  """
  The status of this SavedItem
  """
  status: SavedItemStatus
  """
  Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
  """
  id: ID!
  """
  Unix timestamp of when the entity was created
  """
  _createdAt: Int!
  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int
  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int
  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}
enum SavedItemStatus {
  ARCHIVED
  DELETED
  HIDDEN
  UNREAD
}
"""
Represents a Tag that a User has created for their list
"""
type Tag {
  """
  The actual tag string the user created for their list
  """
  name: String!
  #Future: maybe other properties like icon.
  """
  paginated listing of all SavedItems associated with this Tag for the user
  """
  savedItems(
    filter: SavedItemsFilter
    sort: SavedItemsSort
    pagination: PaginationInput
  ): SavedItemConnection
  """
  Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
  """
  id: ID!
  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int
  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}
"""
Input field for upserting a SavedItem
"""
input SavedItemUpsertInput {
  """
  The url to create/update the SavedItem with. (the url to save to the list)
  """
  url: String!
  """
  Optional, create/update the SavedItem as a favorited item
  """
  isFavorite: Boolean
  """
  Optional, time that request was submitted by client epoch/unix time
  """
  timestamp: Int
  """
  Optional, title of the SavedItem
  """
  title: String
}

"""
Input field for upserting a Save. Used by saveUpsert mutation
"""
input SaveUpsertInput {
  """
  The url to create/update the SavedItem with. (the url to save to the list)
  """
  url: String!
  """
  Optional, title of the SavedItem
  """
  title: String
  """
  Optional, create/update the SavedItem as a favorited item
  """
  isFavorite: Boolean
}

"""
A SavedItem can be one of these content types
"""
enum SavedItemsContentType {
  """
  Item is a parsed article that contains videos
  """
  VIDEO @deprecated(reason: "Use `HAS_VIDEO`.")
  """
  Item is a parsed page can be opened in reader view
  """
  ARTICLE @deprecated(reason: "Use `IS_READABLE`.")
  """
  Item is an image
  """
  IS_IMAGE
  """
  Item is a video
  """
  IS_VIDEO
  """
  Item is a parsed article that contains videos
  """
  HAS_VIDEO
  """
  Item is a parsed page can be opened in reader view
  """
  IS_READABLE
  """
  Item is an un-parsable page and will be opened externally
  """
  IS_EXTERNAL
}
"""
Valid statuses a client may use to filter SavedItems
"""
enum SavedItemStatusFilter {
  UNREAD
  ARCHIVED
  HIDDEN
}
"""
Input field for filtering a user's list
"""
input SavedItemsFilter {
  """
  Optional, filter to get SavedItems updated since a unix timestamp
  """
  updatedSince: Int
  """
  Optional, filter to get SavedItems that have been favorited
  """
  isFavorite: Boolean
  """
  Optional, filter to get SavedItems that have been archived.
  This field is deprecated. Use status instead.
  TODO: Add deprecate tag once input field deprecation is enabled.
  Ref: https://github.com/apollographql/federation/issues/912
  """
  isArchived: Boolean
  """
  Optional, filter to get SavedItems associated to the specified Tag.
  """
  tagIds: [ID!]
  """
  Optional, filter to get SavedItems associated to the specified Tag name.
  To get untagged items, include the string '_untagged_'.
  """
  tagNames: [String!] # _untagged_
  """
  Optional, filter to get SavedItems with highlights
  """
  isHighlighted: Boolean
  """
  Optional, filter to get SavedItems based on content type
  """
  contentType: SavedItemsContentType
  """
  Optional, filter to get user items based on status. Deprecated: use statuses instead.
  """
  status: SavedItemStatusFilter
  """
  Optional, filters to get user items based on multiple statuses (OR operator)
  """
  statuses: [SavedItemStatusFilter]
}
"""
An edge in a connection.
"""
type SavedItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The SavedItem at the end of the edge.
  """
  node: SavedItem
}
"""
The connection type for SavedItem.
"""
type SavedItemConnection {
  """
  A list of edges.
  """
  edges: [SavedItemEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of SavedItems in the connection.
  """
  totalCount: Int!
}
"""
The connection type for Tag.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of Tags in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The Tag at the end of the edge.
  """
  node: Tag
}
"""
Input field for setting all Tag associations on a SavedItem.
"""
input SavedItemTagUpdateInput {
  """
  The SavedItem ID to associate Tags to
  """
  savedItemId: ID!
  """
  The set of Tag IDs to associate to the SavedItem
  """
  tagIds: [ID!]!
}

"""
Input field for setting all Tag associations on a SavedItem.
"""
input SavedItemTagsInput {
  """
  The SavedItem ID to associate Tags to
  """
  savedItemId: ID!
  """
  The set of Tag names to associate to the SavedItem
  """
  tags: [String!]!
}

"""
Input field for adding Tag Associations to a SavedItem, by givenUrl
"""
input SavedItemTagInput {
  givenUrl: Url!
  tagNames: [String!]! @constraint(minItems: 1, maxItems: 30)
}

"""
Input field for creating a Tag
"""
input TagCreateInput {
  """
  The user provided tag string
  """
  name: String!
  """
  ID of the SavedItem to associate with this Tag
  """
  savedItemId: ID!
}
"""
Input field for updating a Tag
"""
input TagUpdateInput {
  """
  Tag ID
  """
  id: ID!
  """
  The updated tag string
  """
  name: String!
}
"""
Enum to specify the sort order of SavedItems fetched
"""
enum SavedItemsSortOrder {
  ASC
  DESC
}
"""
Enum to specify the sort by field (these are the current options, we could add more in the future)
"""
enum SavedItemsSortBy {
  CREATED_AT
  UPDATED_AT
  FAVORITED_AT
  ARCHIVED_AT
}

"""
Input to sort fetched SavedItems. If unspecified, defaults to CREATED_AT, ASC.
"""
input SavedItemsSort {
  """
  The field by which to sort SavedItems
  """
  sortBy: SavedItemsSortBy!

  """
  The order in which to sort SavedItems
  """
  sortOrder: SavedItemsSortOrder!
}

input DeleteSavedItemTagsInput {
  """
  The id of the SavedItem from which to delete a Tag association
  """
  savedItemId: ID!
  """
  The ids of the Tag to disassociate from the SavedItem
  """
  tagIds: [ID!]!
}

type SavedItemTagAssociation {
  """
  The ID of the SavedItem associated with the Tag
  """
  savedItemId: ID!

  """
  The ID of the Tag associated with the SavedItem
  """
  tagId: ID!
}

type User @key(fields: "id") {
  #Note more properties exist here but are defined in another service.

  """
  User id, provided by the user service.
  """
  id: ID!

  """
  Get a general paginated listing of all SavedItems for the user
  """
  savedItems(
    filter: SavedItemsFilter
    sort: SavedItemsSort
    pagination: PaginationInput
  ): SavedItemConnection

  """
  Get a paginated listing of all a user's Tags
  """
  tags(pagination: PaginationInput): TagConnection

  """
  Get a SavedItem by its id
  """
  savedItemById(id: ID!): SavedItem @deprecated(reason: "Use saveById instead")

  """
  Get a PocketSave(s) by its id(s)
  """
  saveById(ids: [ID!]!): [SaveByIdResult!]! @constraint(maxItems: 30)
}
"""
Union type for saveById - retrieving either PocketSaves or NotFound errors
"""
union SaveByIdResult = PocketSave | NotFound

"""
Union type for items that may or may not be processed
"""
union ItemResult = PendingItem | Item

"""
All types in this union should implement BaseError, for client fallback
"""
union TagMutationError = NotFound | SyncConflict # hypothetically others in the future...
"""
All types in this union should implement BaseError, for client fallback
"""
union SaveMutationError = NotFound | SyncConflict # hypothetically others in the future
"""
All types in this union should implement BaseError, for client fallback
"""
union SavedItemMutationError = NotFound | SyncConflict # hypothetically others in the future
enum PendingItemStatus {
  RESOLVED
  UNRESOLVED
}

type PendingItem @key(fields: "url") {
  """
  URL of the item that the user gave for the SavedItem
  that is pending processing by parser
  """
  itemId: String!
  url: Url!
  status: PendingItemStatus
}

type Item @key(fields: "givenUrl") {
  "key field to identify the Item entity in the Parser service"
  givenUrl: Url!

  #Note more properties exist here but are defined in another service.

  """
  Helper property to identify if the given item is in the user's list
  """
  savedItem: SavedItem
}

"""
Default Mutation Type
"""
type Mutation {
  """
  Updates a SavedItem, undeletes and unarchives it, bringing it to the top of the user's list, if it exists
  and creates it if it doesn't.
  """
  upsertSavedItem(input: SavedItemUpsertInput!): SavedItem!

  """
  Archives a SavedItem
  """
  updateSavedItemArchive(id: ID!): SavedItem!

  """
  Unarchives a SavedItem
  """
  updateSavedItemUnArchive(id: ID!): SavedItem!

  """
  Undo the delete operation for a SavedItem
  """
  updateSavedItemUnDelete(id: ID!): SavedItem!

  """
  Favorites a SavedItem
  """
  updateSavedItemFavorite(id: ID!): SavedItem!

  """
  Unfavorites a SavedItem
  """
  updateSavedItemUnFavorite(id: ID!): SavedItem!

  """
  Set the Tags that are associated with a SavedItem.
  Will replace any existing Tag associations on the SavedItem.
  To remove all Tags from a SavedItem, use `updateSavedItemRemoveTags`.
  """
  updateSavedItemTags(input: SavedItemTagUpdateInput!): SavedItem!
    @deprecated(reason: "use saveBatchUpdateTags")

  """
  Removes all Tag associations from a SavedItem. Returns the
  SavedItem that had its Tag associations cleared.
  Note that if this operation results in a Tag having no associations
  to a SavedItem, the Tag object will be deleted.
  """
  updateSavedItemRemoveTags(savedItemId: ID): SavedItem!
    @deprecated(reason: "use saveBatchUpdateTags")

  """
  Deletes a SavedItem from the users list. Returns ID of the
  deleted SavedItem
  """
  deleteSavedItem(id: ID!): ID!

  """
  Updates a Tag (renames the tag), and returns the updated Tag.
  If a Tag with the updated name already exists in the database, will
  associate that Tag to all relevant SavedItems rather than creating
  a duplicate Tag object.
  """
  updateTag(input: TagUpdateInput!): Tag!
  """
  Deletes a Tag object. This is deletes the Tag and all SavedItem associations
  (removes the Tag from all SavedItems). Returns ID of the deleted Tag.
  """
  deleteTag(id: ID!): ID!
  """
  Delete one or more tags from one or more SavedItems.
  Note that if this operation results in a Tag having no associations
  to a SavedItem, the Tag object will be deleted.
  """
  deleteSavedItemTags(input: [DeleteSavedItemTagsInput!]!): [SavedItem!]!

  """
  Add tags to the savedItems
  Inputs a list of SavedItemTagsInput(ie. savedItemId and the list of tagName)
  Returns the list of `SavedItem` for which the tags were added
  """
  createSavedItemTags(input: [SavedItemTagsInput!]!): [SavedItem!]!

  """
  Replaces the old tags associated with the savedItem to the new tag list
  given in the entry
  To remove all Tags from a SavedItem, use `updateSavedItemRemoveTags`.
  Note: if there is a new tag name in the SavedItemTagsInput, then the tag record will be created
  Inputs a list of SavedItemTagsInput(ie. savedItemId and list of tag names)
  Returns the SavedItem for which the tags have been modified.
  """
  replaceSavedItemTags(input: [SavedItemTagsInput!]!): [SavedItem!]!
    @deprecated(reason: "use saveBatchUpdateTags")

  """
  Archives PocketSaves
  """
  saveArchive(id: [ID!]!, timestamp: ISOString!): SaveWriteMutationPayload
    @tag(name: "alpha")

  """
  Unarchives PocketSaves
  """
  saveUnArchive(id: [ID!]!, timestamp: ISOString!): SaveWriteMutationPayload
    @tag(name: "alpha")

  """
  Favorites PocketSaves
  Accepts a list of PocketSave Ids that we want to favorite.
  """
  saveFavorite(id: [ID!]!, timestamp: ISOString!): SaveWriteMutationPayload
    @tag(name: "alpha")

  """
  Unfavorites PocketSaves
  Accepts a list of PocketSave Ids that we want to unfavorite.
  """
  saveUnFavorite(id: [ID!]!, timestamp: ISOString!): SaveWriteMutationPayload
    @tag(name: "alpha")
  """
  Batch update the Tags associated with a Save
  by adding new tags and deleting existing tags.
  Maximum of 150 operations (adds/deletes) per request.
  """
  saveBatchUpdateTags(
    input: [SaveUpdateTagsInput!]! @constraint(minItems: 1, maxItems: 30)
    timestamp: ISOString!
  ): SaveWriteMutationPayload! @tag(name: "alpha")

  """
  Creates a new Save; if the Save already exists (either in List or Archive), "re-add" it.
  "Re-adding" unarchives and undeletes the Save as applicable, and refreshes the "createdAt"
  timestamp.
  """
  saveUpsert(
    input: [SaveUpsertInput!]! @constraint(minItems: 1, maxItems: 30)
    timestamp: ISOString!
  ): SaveWriteMutationPayload! @tag(name: "alpha")

  """
  Associate Tag(s) with a Save
  """
  savedItemTag(input: SavedItemTagInput!, timestamp: ISOString!): SavedItem

  """
  Archive a SavedItem (identified by URL)
  """
  savedItemArchive(givenUrl: Url!, timestamp: ISOString!): SavedItem

  """
  Unarchive a SavedItem (identified by URL)
  """
  savedItemUnArchive(givenUrl: Url!, timestamp: ISOString!): SavedItem

  """
  Favorite a SavedItem (identified by URL)
  """
  savedItemFavorite(givenUrl: Url!, timestamp: ISOString!): SavedItem

  """
  'Unfavorite' a 'favorite' SavedItem (identified by URL)
  """
  savedItemUnFavorite(givenUrl: Url!, timestamp: ISOString!): SavedItem

  """
  'Soft-delete' a SavedItem (identified by URL)
  """
  savedItemDelete(givenUrl: Url!, timestamp: ISOString!): Url

  """
  Undo the 'soft-delete' operation on a SavedItem (identified by URL).
  Does not restore tags. Does not restore SavedItems that have been
  'hard-deleted' (record removed from the database entirely).
  """
  savedItemUnDelete(givenUrl: Url!, timestamp: ISOString!): SavedItem
}

# """

# PocketSave Entities (a rework of SavedItem) starts here.

# """

"""
Enum to specify the PocketSave Status (mapped to integers in data store).
"""
enum PocketSaveStatus {
  ARCHIVED
  DELETED
  HIDDEN
  UNREAD
}

"""
New Pocket Save Type, replacing SavedItem.

Represents a Pocket Item that a user has saved to their list.
(Said otherways, indicates a saved url to a users list and associated user specific information.)
"""
type PocketSave {
  # Not resolved on this subgraph.
  # """
  # Authors credited for content.
  # """
  # authors: [Authors!]

  """
  Indicates if the PocketSave is archived.
  """
  archived: Boolean!

  """
  Timestamp that the PocketSave became archived, null if not archived.
  """
  archivedAt: ISOString

  """
  Unix timestamp of when the PocketSave was created.
  """
  createdAt: ISOString!

  """
  Unix timestamp of when the entity was deleted.
  """
  deletedAt: ISOString

  # Not resolved on this subgraph.
  # """
  # Excerpt from text content, typically the first paragraph.
  # """
  # excerpt: Markdown

  """
  Indicates if the PocketSave is favorited.
  """
  favorite: Boolean!

  """
  Timestamp that the PocketSave became favorited, null if not favorited.
  """
  favoritedAt: ISOString

  """
  The url the user gave (as opposed to normalized URLs).
  """
  givenUrl: String!

  """
  Surrogate primary key.
  """
  id: ID!

  # Not resolved on this subgraph.
  # """
  # Reference to the underlying Resource that this PocketSave metadata is about.
  # """
  # resource: PocketResource!

  # Not resolved on this subgraph.
  # """
  # The web site publisher; defaults to the domain of the PocketSave URL.
  # """
  # source: String!

  """
  The status of this PocketSave; Marked for review for possible removal.
  """
  status: PocketSaveStatus

  """
  The Suggested Tags associated with this PocketSave, if the user is not premium or there are none, this will be empty.
  """
  suggestedTags: [Tag!]

  """
  The Tags associated with this PocketSave.
  """
  tags: [Tag!]

  """
  Link to the underlying Pocket Item for the URL.
  Temporary until resource field is added. Will hopefully
  make it easier for clients to adopt.
  """
  item: ItemResult! @deprecated(reason: "use resource")

  # Not resolved on this subgraph.
  # """
  # Direction text should be displayed, e.g. right-to-left; an enum.
  # """
  # textDirection: TextDirection

  # Not resolved on this subgraph.
  # """
  # Image to display as thumbnail.
  # """
  # thumbnail: Image

  # Not resolved on this subgraph.
  # """
  # Estimated time to consume content, rounded to the nearest minute.
  # """
  # timeToConsume: Int

  """
  The title of the Resource; defaults to the URL.
  """
  title: String!

  """
  Unix timestamp of when the PocketSave was last updated, if any property on the PocketSave is modified this timestamp is set to the modified time.
  """
  updatedAt: ISOString
}

"""
Payload for mutations that create or update Saves
"""
type SaveWriteMutationPayload {
  """
  The mutated Save objects; empty if the mutation did not succeed.
  """
  save: [PocketSave!]!
  """
  Any errors associated with the mutation. Empty if the mutation was succesful.
  """
  errors: [SaveMutationError!]!
}

"""
Payload for mutations that create or update SavedItems
"""
type SavedItemWriteMutationPayload {
  """
  The mutated SavedItem objects; empty if the mutation did not succeed.
  """
  savedItem: [SavedItem!]!
  """
  Any errors associated with the mutation. Empty if the mutation was succesful.
  """
  errors: [SavedItemMutationError!]!
}

"""
Payload for mutations that delete Saves
"""
type SaveDeleteMutationPayload {
  success: Boolean!
  """
  Any errors associated with the mutation. Empty if the mutation was succesful.
  """
  errors: [SaveMutationError!]!
}

"""
Payload for mutations that delete Saves
"""
type SavedItemDeleteMutationPayload {
  success: Boolean!
  """
  Any errors associated with the mutation. Empty if the mutation was succesful.
  """
  errors: [SavedItemMutationError!]!
}

"""
Payload for mutations that create or update Tags
"""
type TagWriteMutationPayload {
  """
  The mutated Tag objects; empty if the mutation did not succeed.
  """
  tag: [Tag!]!
  """
  Any errors associated with the mutation. Empty if the mutation was succesful.
  """
  errors: [TagMutationError!]!
}

"""
Payload for mutations that delete Tags
"""
type TagDeleteMutationPayload {
  success: Boolean!
  """
  Any errors associated with the mutation. Empty if the mutation was succesful.
  """
  errors: [TagMutationError!]!
}
# To be setup: connect PocketSaves to a new entity - PocketResource
# extend type PocketResource @key(fields: "itemId") {
#   "key field to identify the PocketResource entity in the Parser service"
#   itemId: ID! @external

#   """
#   Identify if the given PocketResource is in the user's list.
#   """
#   pocketSave: PocketSave
# }
