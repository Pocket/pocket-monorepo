extend schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: ["@key", "@composeDirective", "@tag", "@shareable", "@inaccessible"]
  )
  # The link directive is required to federate @constraint
  # It doesn't actually have to be a real spec, but it would be good
  # to write one and replace this.
  @link(url: "https://myspecs.dev/myDirective/v1.0", import: ["@constraint"])
  @composeDirective(name: "@constraint")

scalar Url
scalar FunctionalBoostValue
scalar ISOString
scalar HtmlString

"""
An index item can be in one of these states
QUEUED implies an item that has not been archived
"""
enum SearchStatus {
  QUEUED
  ARCHIVED
}

"""
Sort direction of the returned items.
"""
enum SearchSortDirection {
  ASC
  DESC
}

"""
Used to detemermine whether to add or multiply a document's score by the
functional boost factor
"""
enum SearchFunctionalBoostOperation {
  ADD
  MULTIPLY
}

"""
Input field for sorting items
"""
input SearchSort {
  "Field in elasticsearch to sort by"
  field: String!
  "Direction of the sort (ASC/DESC)"
  direction: SearchSortDirection!
}

"""
Input filed for filtering items
"""
input SearchFilter {
  "Optional fitler to get item with specific tags"
  tags: [String]
  "Optional filter to get items in a specific state"
  status: SearchStatus
  "Optional filter to get items that are favorited"
  favorite: Boolean
  "Optional filter to items of a specific content type"
  contentType: String
  """
  Optional filter to get items that matches the domain
  domain should be in the url format, e.g getpocket.com (or) list.getpocket.com
  """
  domain: String
}

"""
Input field to get elasticsearch highlights of keywords
"""
input SearchHighlightField {
  "Field to highlight"
  field: String!
  "The number of characters to return in addition to the keyword"
  size: Int!
}

"""
Input field to boost the score of an elasticsearch document based on a specific field and value
"""
input FunctionalBoostField {
  "Field to evaluate for boosting"
  field: String!
  "Field value to evaluate"
  value: FunctionalBoostValue!
  "A float number to boost the score by"
  factor: Float!
  "The mathematical operation to use for boosting"
  operation: SearchFunctionalBoostOperation!
}

"""
Input field for search
"""
input SearchParams {
  "The keyword to search for"
  term: String!
  "Filters to be applied to the search"
  filters: SearchFilter
  "Sorting for the search"
  sort: SearchSort
  "Offset for pagination"
  from: Int
  "Number of items to return"
  size: Int
  "Fields to search for the keyword in"
  fields: [String]!
  "Fields that should be highlighted if keywords are found within them"
  highlightFields: [SearchHighlightField]
  "Operation to boost the score of a document based"
  functionalBoosts: [FunctionalBoostField]
}

"""
Elasticsearch highlights
"""
type ItemHighlights {
  full_text: [String]
  url: [String]
  tags: [String]
  title: [String]
}

type Item @key(fields: "itemId") {
  "key field to identify the Item entity in the Parser service"
  itemId: String!
  "Keyword highlights from search"
  highlights: ItemHighlights
}

"""
The return type for the search query
"""
type SearchResult {
  "Number of items found"
  totalResults: Int!
  "Items found"
  results: [Item]
  page: Int @deprecated(reason: "Not required by implementing clients")
  perPage: Int @deprecated(reason: "Not required by implementing client")
}

type RecentSearch {
  term: String!
  context: RecentSearchContext
  sortId: Int!
}

type RecentSearchContext {
  key: String
  value: String
}

type Query {
  """
  Search Pocket's corpus of recommendations and collections.
  """
  searchCorpus(
    search: CorpusSearchQueryString!, 
    filter: CorpusSearchFilters!,
    sort: CorpusSearchSort,
    pagination: PaginationInput
  ): CorpusSearchConnection
}

type User @key(fields: "id") {
  "key field to identify the User entity in the UserAPI service"
  id: ID!
  "Premium search query. Name will be updated after client input"
  search(params: SearchParams!): SearchResult!
    @deprecated(reason: "Use searchSavedItems")
  """
  Get a paginated list of user items that match a given term
  """
  searchSavedItems(
    term: String!
    filter: SearchFilterInput
    sort: SearchSortInput
    pagination: PaginationInput
  ): SavedItemSearchResultConnection
  advancedSearch(
    queryString: String
    filter: AdvancedSearchFilters
    sort: SearchSortInput
    pagination: PaginationInput
  ): SavedItemSearchResultConnection
  searchSavedItemsByOffset(
    term: String!
    filter: SearchFilterInput
    sort: SearchSortInput
    pagination: OffsetPaginationInput
  ): SavedItemSearchResultPage @tag(name: "internal")
  advancedSearchByOffset(
    queryString: String
    filter: AdvancedSearchFilters
    sort: SearchSortInput
    pagination: OffsetPaginationInput
  ): SavedItemSearchResultPage @tag(name: "internal")
  recentSearches: [RecentSearch!]
}

"""
A page of SavedItemSearchResult, retrieved by offset-based pagination.
"""
type SavedItemSearchResultPage @tag(name: "internal") {
  entries: [SavedItemSearchResult!]!
  totalCount: Int!
  offset: Int!
  limit: Int!
}

"""
An edge in a connection.
"""
type SavedItemSearchResultEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: SavedItemSearchResult!
}

"""
The connection type for SavedItem.
"""
type SavedItemSearchResultConnection {
  """
  A list of edges.
  """
  edges: [SavedItemSearchResultEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo @shareable {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Pagination request. To determine which edges to return, the connection
evaluates the `before` and `after` cursors (if given) to filter the
edges, then evaluates `first`/`last` to slice the edges (only include a
value for either `first` or `last`, not both). If all fields are null,
by default will return a page with the first 30 elements.
"""
input PaginationInput {
  """
  Returns the elements in the list that come after the specified cursor.
  The specified cursor is not included in the result.
  """
  after: String
  """
  Returns the elements in the list that come before the specified cursor.
  The specified cursor is not included in the result.
  """
  before: String
  """
  Returns the first _n_ elements from the list. Must be a non-negative integer.
  If `first` contains a value, `last` should be null/omitted in the input.
  """
  first: Int
  """
  Returns the last _n_ elements from the list. Must be a non-negative integer.
  If `last` contains a value, `first` should be null/omitted in the input.
  Note: For premium search, setting `last` alone is not currently supported and
  this has to set with before/last combination.
  """
  last: Int
}

"""
Input for offset-pagination (internal backend use only).
"""
input OffsetPaginationInput {
  """ Defaults to 0 """
  offset: Int @constraint(min: 0)
  """ Defaults to 30 """
  limit: Int @constraint(exclusiveMin: 0, max: 100)
}

"""
Valid statuses a client may use to filter
"""
enum SearchItemsStatusFilter {
  UNREAD
  ARCHIVED
}

"""
A SavedItem can be one of these content types
"""
enum SearchItemsContentType {
  VIDEO
  ARTICLE
}

input SearchFilterInput {
  """
  Optional, filter to get user items that have been favorited
  """
  isFavorite: Boolean
  """
  Optional, filter to get user items only based on title and url, ie Free Search
  Note, though that if this is selected and the user is premium, they will not get search highligthing.
  """
  onlyTitleAndURL: Boolean
  """
  Optional, filter to get SavedItems based on content type
  """
  contentType: SearchItemsContentType
  """
  Optional, filter to get user items based on status.
  """
  status: SearchItemsStatusFilter
  """
  Optional filter to get items that matches the domain
  domain should be in the url format, e.g getpocket.com (or) list.getpocket.com
  """
  domain: String
}

input AdvancedSearchFilters {
  isFavorite: Boolean
  contentType: SearchItemsContentType
  status: SearchItemsStatusFilter
  domain: String
  title: String
  """
  Include only items with the following tags (exact)
  in search results (OR combination)
  """
  tags: [String!] # @constraint(minLength: 1)
}

"""
Enum to specify the sort order of user items fetched
"""
enum SearchItemsSortOrder {
  ASC
  DESC
}

"""
Enum to specify the sort by field (these are the current options, we could add more in the future)
"""
enum SearchItemsSortBy {
  """
  Indicates when a SavedItem was created
  """
  CREATED_AT
  """
  Estimated time to read a SavedItem
  """
  TIME_TO_READ
  """
  Sort SavedItems based on a relevance score
  This is a feature of elasticsearch and current only available for premium search
  """
  RELEVANCE
}

input SearchSortInput {
  """
  The field by which to sort user items
  """
  sortBy: SearchItemsSortBy!
  """
  The order in which to sort user items
  """
  sortOrder: SearchItemsSortOrder
}

"""
Elasticsearch highlights.
Highlighted snippets from the following fields in the search results
so clients can show users where the query matches are.
Each field, if available, contains an array of html text snippets
that contain a match to the search term.
The matching text is wrapped in `<em>` tags, e.g. ["Hiss at <em>vacuum</em> cleaner if it fits i sits"]
"""
type SaveItemSearchHighlights {
  fullText: [String]
  url: [String]
  tags: [String]
  title: [String]
}

type SavedItemSearchResult {
  savedItem: SavedItem!
  """
  Highlighted snippets from fields in the search results
  searchHighlights is a premium user feature. Not available for free search.
  """
  searchHighlights: SaveItemSearchHighlights
}

type SavedItem @key(fields: "id") {
  "key field to identify the SavedItem entity in the ListAPI service"
  id: ID!
}

input RecentSearchInput {
  """The term that was used for search"""
  term: String!
  """
  Optional, the time the search was performed. 
  Defaults to current server time at time of request.
  """
  timestamp: ISOString
}

type Mutation {
  """
  Save search to potentially appear in recentSearches response.
  Requires premium account (otherwise will send ForbiddenError).
  """
  saveSearch(search: RecentSearchInput!): RecentSearch
}


"""Fields that can be searched using query strings"""
enum CorpusSearchFields {
  """
  (Default) Search the fields which relate to the content
  of the resource (title, article, excerpt, extracted content)
  rather than the metadata (publisher).
  """
  ALL_CONTENTFUL
  """Search terms in title fields"""
  TITLE
  """Search terms in parsed, extracted content fields"""
  EXTRACTED_CONTENT
  """Search terms in excerpt fields"""
  EXCERPT
  """Search terms in publisher fields"""
  PUBLISHER
  """Search all possible fields"""
  ALL
}

"""Which corpus to search, by language"""
enum CorpusLanguage {
  EN
  DE
  IT
  ES
  FR
}

"""A search query for the corpus"""
input CorpusSearchQueryString {
  """The query string to search."""
  query: String!
  """
  A specific field to search on (e.g. title), 
  or ALL to search all available text content fields.
  If missing, defaults to 'ALL_CONTENTFUL'
  """
  field: CorpusSearchFields
}

"""Content type classification for a corpus item"""
enum CorpusContentType {
  ARTICLE
  VIDEO
  COLLECTION
}

"""
Filter to get documents added/published before or after a date,
or provide both for a range of [after, before)
Before is exclusive, after is inclusive.
"""
input DateFilter {
  """Exclusive date -- results must be exclusively before this time."""
  before: ISOString
  """Inclusive date -- results must be at or after than this time."""
  after: ISOString
}

"""Filters to refine corpus search results."""
input CorpusSearchFilters {
  """The language of the corpus to search (letter code)"""
  language: CorpusLanguage!
  """The author's name"""
  author: String
  """
  The topic (use getTopics query to retrieve valid topics).
  Multiple topics are combined with OR.
  """
  topic: [String!]
  """
  The publisher's name. This is an exact match for filtering.
  To use publisher in search, use the publisher field in the query
  string.
  """
  publisher: String
  """
  Filter for when an article was published. Can provide
  upper/lower bounds with 'before' or 'after', or use both
  both to create a time range.
  """
  publishedDateRange: DateFilter
  """When the content was added to Pocket's corpus"""
  addedDateRange: DateFilter
  """Set to true to exclude collections from the results."""
  excludeCollections: Boolean
  """Set to true to exclude ML-generated recommendations from the results."""
  excludeML: Boolean
  """
  Filter to limit the result set to specific content types. 
  Multiple types are combined with OR.
  Can use this to search collections only.
  """
  contentType: [CorpusContentType!]
}

"""Sortable properties for Corpus Search"""
enum CorpusSearchSortBy {
  """Relevance score computed by search algorithm"""
  RELEVANCE
  """When the content was added to the corpus"""
  DATE_ADDED_TO_CORPUS
  """
  When the content was originally published 
  (Note: this data is sparse/nullable)
  """
  DATE_PUBLISHED
}

"""
Sort scheme for Corpus Search. Defaults to showing most relevant results first.
"""
input CorpusSearchSort {
  sortBy: CorpusSearchSortBy!
  sortOrder: SearchItemsSortOrder
}

"""Paginated corpus search result connection"""
type CorpusSearchConnection {
  edges: [CorpusSearchEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Highlighted snippets from fields in the search results
so clients can show users where the query matches are. 
Each field, if available, contains an array of html text
snippets that contain a match to the search term.
The matching text is wrapped in <em> tags, e.g. 
["Hiss at <em>vacuum</em> cleaner if it fits i sits"]
"""
type CorpusSearchHighlights {
  fullText: [HtmlString]
  title: [HtmlString]
  excerpt: [HtmlString]
  publisher: [HtmlString]
}

"""An edge in a CorpusSearchConnection result"""
type CorpusSearchEdge {
  cursor: String!
  node: CorpusSearchNode!
}

"""A node in a CorpusSearchConnection result"""
type CorpusSearchNode {
  """For federation only"""
  url: Url! @inaccessible
  """Search highlights"""
  searchHighlights: CorpusSearchHighlights
}
