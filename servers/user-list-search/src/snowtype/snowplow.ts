// Automatically generated by Snowtype

/**
 * Entity to describe an app using the Pocket API that triggers (not executes) updates on
 * the backend. Expected to be included on all events.
 */
export type APIUser = {
  /**
   * Pocket backend identifier for an app using the Pocket API.
   */
  api_id: number;
  /**
   * The version number for the client hitting the API.
   */
  client_version?: string;
  /**
   * Indicates whether an app is a native Pocket app.
   */
  is_native?: boolean;
  /**
   * Indicates whether an app has been whitelisted as one that sends non-automated actions and
   * represents real human usage.
   */
  is_trusted?: boolean;
  /**
   * The name of the app using the Pocket API.
   */
  name?: string;
};

/**
 * Entity to describe a user based on available identifiers. Expected to be included in all
 * events that are [theoretically] initiated by a human.
 */
export type User = {
  /**
   * The Adjust device ID used by the Adjust SDK.
   */
  adjust_id?: string;
  /**
   * Email address of the user.
   */
  email?: string;
  /**
   * The backend cookie-based identifier for a user (logged in or out).
   */
  guid?: number;
  /**
   * The hashed backend cookie-based identifier for a user (logged in or out).
   */
  hashed_guid?: string;
  /**
   * The hashed backend identifier for a full Pocket account.
   */
  hashed_user_id?: string;
  /**
   * The backend identifier for a full Pocket account.
   */
  user_id?: number;
};

/**
 * Event triggered when SearchResults are returned from Pocket's search api (for saves and
 * corpus). Entities included: api_user; sometimes user, feature_flag.
 */
export type SearchResponseEvent = {
  /**
   * A unique ID for this result
   */
  id: string;
  /**
   * Number of results in the result set.
   */
  result_count_total: number;
  /**
   * Ordered result of urls in the search result connection
   */
  result_urls: string[];
  /**
   * UNIX time in seconds when the results were sent by the Search API.
   */
  returned_at: number;
  /**
   * The search query
   */
  search_query: SearchQuery;
  /**
   * Identifies the corpus that was searched
   */
  search_type: SearchType;
};

/**
 * The search query
 */
export type SearchQuery = {
  /**
   * Identifies the filters which were applied to the search, if applicable.
   */
  filter: Filter[];
  /**
   * 2-5 character language code to indicate the language the search was performed in
   */
  language?: string;
  query: string;
  /**
   * Identifies the fields which were searched.
   */
  scope: Scope;
};

export type Filter =
  | 'domain'
  | 'title'
  | 'tags'
  | 'contentType'
  | 'status'
  | 'isFavorite'
  | 'publishedDateRange'
  | 'topic'
  | 'excludeML'
  | 'excludeCollections'
  | 'addedDateRange'
  | 'publisher'
  | 'author';

/**
 * Identifies the fields which were searched.
 */
export type Scope =
  | 'all'
  | 'all_contentful'
  | 'title'
  | 'excerpt'
  | 'content'
  | 'publisher';

/**
 * Identifies the corpus that was searched
 */
export type SearchType =
  | 'saves'
  | 'corpus_en'
  | 'corpus_es'
  | 'corpus_de'
  | 'corpus_it'
  | 'corpus_fr';
