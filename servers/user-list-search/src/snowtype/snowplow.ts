import { buildSelfDescribingEvent, SelfDescribingJson, Timestamp, Tracker } from '@snowplow/node-tracker';
// Automatically generated by Snowtype

/**
 * Entity to describe an app using the Pocket API that triggers (not executes) updates on
 * the backend. Expected to be included on all events.
 */
export type APIUser = {
    /**
     * Pocket backend identifier for an app using the Pocket API.
     */
    api_id: number;
    /**
     * The version number for the client hitting the API.
     */
    client_version?: string;
    /**
     * Indicates whether an app is a native Pocket app.
     */
    is_native?: boolean;
    /**
     * Indicates whether an app has been whitelisted as one that sends non-automated actions and
     * represents real human usage.
     */
    is_trusted?: boolean;
    /**
     * The name of the app using the Pocket API.
     */
    name?: string;
}

/**
 * Entity to describe a user based on available identifiers. Expected to be included in all
 * events that are [theoretically] initiated by a human.
 */
export type User = {
    /**
     * The Adjust device ID used by the Adjust SDK.
     */
    adjust_id?: string;
    /**
     * Email address of the user.
     */
    email?: string;
    /**
     * The backend cookie-based identifier for a user (logged in or out).
     */
    guid?: number;
    /**
     * The hashed backend cookie-based identifier for a user (logged in or out).
     */
    hashed_guid?: string;
    /**
     * The hashed backend identifier for a full Pocket account.
     */
    hashed_user_id?: string;
    /**
     * The backend identifier for a full Pocket account.
     */
    user_id?: number;
}

/**
 * Event triggered when SearchResults are returned from Pocket's search api (for saves and
 * corpus). Entities included: api_user; sometimes user, feature_flag.
 */
export type SearchResponseEvent = {
    /**
     * A unique ID for this result
     */
    id: string;
    /**
     * Number of results in the result set.
     */
    result_count_total: number;
    /**
     * Ordered result of urls in the search result connection
     */
    result_urls: string[];
    /**
     * UNIX time in seconds when the results were sent by the Search API.
     */
    returned_at: number;
    /**
     * The search query
     */
    search_query: SearchQuery;
    /**
     * Identifies the corpus that was searched
     */
    search_type: SearchType;
}

/**
 * The search query
 */
export type SearchQuery = {
    /**
     * Identifies the filters which were applied to the search, if applicable.
     */
    filter: Filter[];
    /**
     * 2-5 character language code to indicate the language the search was performed in
     */
    language?: string;
    query:     string;
    /**
     * Identifies the fields which were searched.
     */
    scope: Scope;
}

export type Filter = "domain" | "title" | "tags" | "contentType" | "status" | "isFavorite" | "publishedDateRange" | "topic" | "excludeML" | "excludeCollections" | "addedDateRange" | "publisher" | "author";

/**
 * Identifies the fields which were searched.
 */
export type Scope = "all" | "all_contentful" | "title" | "excerpt" | "content" | "publisher";

/**
 * Identifies the corpus that was searched
 */
export type SearchType = "saves" | "corpus_en" | "corpus_es" | "corpus_de" | "corpus_it" | "corpus_fr";

/**
 * Event triggered when the backend updates the state of a saved item for a user. Entities
 * included: list_item (one new and one old), api_user, and user.
 */
export type ListItemUpdate = {
    /**
     * The action performed on the user-item.
     */
    trigger: ListItemUpdateTrigger;
}

/**
 * The action performed on the user-item.
 */
export type ListItemUpdateTrigger = "save" | "archive" | "delete" | "favorite" | "unfavorite" | "tags_update" | "unarchive";

/**
 * Entity to describe an item that has been saved to a userâ€™s list. Expected (new and old)
 * on all list_item_update events.
 */
export type ListItem = {
    /**
     * The UTC unix timestamp (in seconds) for when the list item was created (list.time_added).
     */
    created_at: number;
    /**
     * Indicates whether the item is favorited by the user.
     */
    is_favorited: boolean;
    /**
     * The backend identifier for the URL.
     */
    item_id: number;
    /**
     * Indication of whether the version of the entity is before or after the modifications were
     * made.
     */
    object_version: ObjectVersion;
    /**
     * The status of the list item.
     */
    status: Status;
    /**
     * The set of tags the user has added to the item.
     */
    tags: string[];
    /**
     * The URL of the list item.
     */
    url: string;
}

/**
 * Indication of whether the version of the entity is before or after the modifications were
 * made.
 */
export type ObjectVersion = "new" | "old";

/**
 * The status of the list item.
 */
export type Status = "unread" | "archived" | "deleted" | "pending" | "pending_hidden" | "hidden" | "not_in_list";

/**
 * Event triggered when the backend updates the properties of an object. Entities included:
 * a new and an old entity for the object being updated, api_user, and [sometimes] user.
 */
export type ObjectUpdate = {
    /**
     * The name of the entity being updated.
     */
    object: Object;
    /**
     * The backend action taken that triggers the object update.
     */
    trigger: ObjectUpdateTrigger;
}

/**
 * The name of the entity being updated.
 */
export type Object = "account" | "syndicated_article" | "newsletter_subscriber" | "user" | "payment_subscription" | "collection" | "reviewed_corpus_item" | "scheduled_corpus_candidate" | "scheduled_corpus_item" | "prospect" | "shareable_list" | "shareable_list_item" | "pocket_share";

/**
 * The backend action taken that triggers the object update.
 */
export type ObjectUpdateTrigger = "sso_login" | "account_signup" | "account_product_digest_update" | "account_email_updated" | "account_delete" | "collection_created" | "collection_updated" | "newsletter_signup" | "payment_subscription_renewed" | "payment_subscription_ended" | "payment_subscription_created" | "pocket_share_created" | "pocket_share_context_updated" | "prospect_created" | "prospect_reviewed" | "reviewed_corpus_item_updated" | "reviewed_corpus_item_removed" | "reviewed_corpus_item_rejected" | "reviewed_corpus_item_added" | "scheduled_corpus_candidate_generated" | "scheduled_corpus_item_rescheduled" | "scheduled_corpus_item_removed" | "scheduled_corpus_item_added" | "shareable_list_created" | "shareable_list_updated" | "shareable_list_deleted" | "shareable_list_hidden" | "shareable_list_unhidden" | "shareable_list_published" | "shareable_list_unpublished" | "shareable_list_item_created" | "shareable_list_item_deleted" | "shareable_list_item_updated" | "modify" | "insert" | "user_guid_linked" | "account_login" | "account_password_changed";

/**
 * Entity to describe an Item that has been shared from the Pocket Share button.
 */
export type PocketShare = {
    /**
     * The UTC unix timestamp (in seconds) for when the list item was created (list.time_added).
     */
    created_at: number;
    /**
     * The number of characters in the attached note (zero if there is no note)
     */
    note_length: number;
    /**
     * The number of quotes from the article included on the share (can be zero)
     */
    quote_count: number;
    /**
     * The share url's slug. Corresponds to the slug used in the database.
     */
    slug: string;
    /**
     * The URL of the Item that was shared.
     */
    target_url: string;
}

interface CommonEventProperties<T = Record<string, unknown>> {
    /** Add context to an event by setting an Array of Self Describing JSON */
    context?: Array<SelfDescribingJson<T>> | null;
    /** Set the true timestamp or overwrite the device sent timestamp on an event */
    timestamp?: Timestamp | null;
}

/**
 * Creates a Snowplow Event Specification entity.
 */
export function createEventSpecification(eventSpecification: EventSpecification){
    return {
        schema:
            'iglu:com.snowplowanalytics.snowplow/event_specification/jsonschema/1-0-2',
        data: eventSpecification,
    }
}

/**
 * Automatically attached context for event specifications
 */
interface EventSpecification {
    id: string;
    name: string;
    data_product_id: string;
    data_product_name: string;
}

/**
 * Track a Snowplow event for APIUser.
 * Entity to describe an app using the Pocket API that triggers (not executes) updates on the backend. Expected to be included on all events.
 */
export function trackAPIUser<T extends {} = any>(tracker: Tracker, aPIUser: APIUser & CommonEventProperties<T>){
    const { context, timestamp, ...data } = aPIUser;
    tracker.track(buildSelfDescribingEvent({
        event: {
            schema: 'iglu:com.pocket/api_user/jsonschema/1-0-2',
            data
        }
    }), context, timestamp);
}

/**
 * Creates a Snowplow APIUser entity.
 */
export function createAPIUser(aPIUser: APIUser){
    return {
        schema: 'iglu:com.pocket/api_user/jsonschema/1-0-2',
        data: aPIUser
    }
}
/**
 * Track a Snowplow event for User.
 * Entity to describe a user based on available identifiers. Expected to be included in all events that are [theoretically] initiated by a human.
 */
export function trackUser<T extends {} = any>(tracker: Tracker, user: User & CommonEventProperties<T>){
    const { context, timestamp, ...data } = user;
    tracker.track(buildSelfDescribingEvent({
        event: {
            schema: 'iglu:com.pocket/user/jsonschema/1-0-1',
            data
        }
    }), context, timestamp);
}

/**
 * Creates a Snowplow User entity.
 */
export function createUser(user: User){
    return {
        schema: 'iglu:com.pocket/user/jsonschema/1-0-1',
        data: user
    }
}
/**
 * Track a Snowplow event for SearchResponseEvent.
 * Event triggered when SearchResults are returned from Pocket&#x27;s search api (for saves and corpus). Entities included: api_user; sometimes user, feature_flag.
 */
export function trackSearchResponseEvent<T extends {} = any>(tracker: Tracker, searchResponseEvent: SearchResponseEvent & CommonEventProperties<T>){
    const { context, timestamp, ...data } = searchResponseEvent;
    tracker.track(buildSelfDescribingEvent({
        event: {
            schema: 'iglu:com.pocket/search_response_event/jsonschema/1-0-4',
            data
        }
    }), context, timestamp);
}

/**
 * Creates a Snowplow SearchResponseEvent entity.
 */
export function createSearchResponseEvent(searchResponseEvent: SearchResponseEvent){
    return {
        schema: 'iglu:com.pocket/search_response_event/jsonschema/1-0-4',
        data: searchResponseEvent
    }
}
/**
 * Track a Snowplow event for ListItemUpdate.
 * Event triggered when the backend updates the state of a saved item for a user. Entities included: list_item (one new and one old), api_user, and user.
 */
export function trackListItemUpdate<T extends {} = any>(tracker: Tracker, listItemUpdate: ListItemUpdate & CommonEventProperties<T>){
    const { context, timestamp, ...data } = listItemUpdate;
    tracker.track(buildSelfDescribingEvent({
        event: {
            schema: 'iglu:com.pocket/list_item_update/jsonschema/1-0-1',
            data
        }
    }), context, timestamp);
}

/**
 * Creates a Snowplow ListItemUpdate entity.
 */
export function createListItemUpdate(listItemUpdate: ListItemUpdate){
    return {
        schema: 'iglu:com.pocket/list_item_update/jsonschema/1-0-1',
        data: listItemUpdate
    }
}
/**
 * Track a Snowplow event for ListItem.
 * Entity to describe an item that has been saved to a userâ€™s list. Expected (new and old) on all list_item_update events.
 */
export function trackListItem<T extends {} = any>(tracker: Tracker, listItem: ListItem & CommonEventProperties<T>){
    const { context, timestamp, ...data } = listItem;
    tracker.track(buildSelfDescribingEvent({
        event: {
            schema: 'iglu:com.pocket/list_item/jsonschema/1-0-1',
            data
        }
    }), context, timestamp);
}

/**
 * Creates a Snowplow ListItem entity.
 */
export function createListItem(listItem: ListItem){
    return {
        schema: 'iglu:com.pocket/list_item/jsonschema/1-0-1',
        data: listItem
    }
}
/**
 * Track a Snowplow event for ObjectUpdate.
 * Event triggered when the backend updates the properties of an object. Entities included: a new and an old entity for the object being updated, api_user, and [sometimes] user.
 */
export function trackObjectUpdate<T extends {} = any>(tracker: Tracker, objectUpdate: ObjectUpdate & CommonEventProperties<T>){
    const { context, timestamp, ...data } = objectUpdate;
    tracker.track(buildSelfDescribingEvent({
        event: {
            schema: 'iglu:com.pocket/object_update/jsonschema/1-0-20',
            data
        }
    }), context, timestamp);
}

/**
 * Creates a Snowplow ObjectUpdate entity.
 */
export function createObjectUpdate(objectUpdate: ObjectUpdate){
    return {
        schema: 'iglu:com.pocket/object_update/jsonschema/1-0-20',
        data: objectUpdate
    }
}
/**
 * Track a Snowplow event for PocketShare.
 * Entity to describe an Item that has been shared from the Pocket Share button.
 */
export function trackPocketShare<T extends {} = any>(tracker: Tracker, pocketShare: PocketShare & CommonEventProperties<T>){
    const { context, timestamp, ...data } = pocketShare;
    tracker.track(buildSelfDescribingEvent({
        event: {
            schema: 'iglu:com.pocket/pocket_share/jsonschema/1-0-1',
            data
        }
    }), context, timestamp);
}

/**
 * Creates a Snowplow PocketShare entity.
 */
export function createPocketShare(pocketShare: PocketShare){
    return {
        schema: 'iglu:com.pocket/pocket_share/jsonschema/1-0-1',
        data: pocketShare
    }
}

/**
 * Tracks a ItemSave event specification.
 * ID: 2565192a-4600-45db-861d-d9b9378ed87e
 */
export function trackItemSaveSpec(tracker: Tracker, itemSave: ListItemUpdate & CommonEventProperties<APIUser | ListItem | User>){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '2565192a-4600-45db-861d-d9b9378ed87e',
        name: 'Item Save',
        data_product_id: '4a1a7785-38d7-432d-8453-01ddc046450f',
        data_product_name: 'Pocket Backend'
    });

    const context = Array.isArray(itemSave.context)
        ? [...itemSave.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedItemSave = {
        ...itemSave,
        context,
    };

    trackListItemUpdate<APIUser | ListItem | User> (tracker, modifiedItemSave);
}
/**
 * Tracks a CreateShareLink event specification.
 * ID: 3dbe5b4a-333c-4798-83f4-4ef30dfe84be
 */
export function trackCreateShareLinkSpec(tracker: Tracker, createShareLink: ObjectUpdate & CommonEventProperties<APIUser | PocketShare | User>){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '3dbe5b4a-333c-4798-83f4-4ef30dfe84be',
        name: 'Create Share Link',
        data_product_id: '4a1a7785-38d7-432d-8453-01ddc046450f',
        data_product_name: 'Pocket Backend'
    });

    const context = Array.isArray(createShareLink.context)
        ? [...createShareLink.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedCreateShareLink = {
        ...createShareLink,
        context,
    };

    trackObjectUpdate<APIUser | PocketShare | User> (tracker, modifiedCreateShareLink);
}
/**
 * Tracks a UpdateShareLink event specification.
 * ID: 6d541fdc-440e-4873-afd2-fe522806157b
 */
export function trackUpdateShareLinkSpec(tracker: Tracker, updateShareLink: ObjectUpdate & CommonEventProperties<APIUser | PocketShare | User>){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '6d541fdc-440e-4873-afd2-fe522806157b',
        name: 'Update Share Link',
        data_product_id: '4a1a7785-38d7-432d-8453-01ddc046450f',
        data_product_name: 'Pocket Backend'
    });

    const context = Array.isArray(updateShareLink.context)
        ? [...updateShareLink.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedUpdateShareLink = {
        ...updateShareLink,
        context,
    };

    trackObjectUpdate<APIUser | PocketShare | User> (tracker, modifiedUpdateShareLink);
}
/**
 * Tracks a SearchResult event specification.
 * ID: 8bde42c4-659f-40b6-9a95-865bde7f05c3
 */
export function trackSearchResultSpec(tracker: Tracker, searchResult: SearchResponseEvent & CommonEventProperties<APIUser | User>){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '8bde42c4-659f-40b6-9a95-865bde7f05c3',
        name: 'Search Result',
        data_product_id: '4a1a7785-38d7-432d-8453-01ddc046450f',
        data_product_name: 'Pocket Backend'
    });

    const context = Array.isArray(searchResult.context)
        ? [...searchResult.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedSearchResult = {
        ...searchResult,
        context,
    };

    trackSearchResponseEvent<APIUser | User> (tracker, modifiedSearchResult);
}

