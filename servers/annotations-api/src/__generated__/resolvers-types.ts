// THIS FILE IS GENERATED, DO NOT EDIT!
/* eslint-disable */
/* tslint:disable */
import { GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { GraphQLResolveInfoWithCacheControl as GraphQLResolveInfo } from '@apollo/cache-control-types';
import { IContext } from '../server/apollo/context';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** Integer based represention of a unix timestamp */
  Timestamp: { input: any; output: any; }
  ValidUrl: { input: any; output: any; }
  _FieldSet: { input: any; output: any; }
};

/** Input object for creating and deleting highlights using bulk mutation. */
export type BatchWriteHighlightsInput = {
  create?: InputMaybe<Array<CreateHighlightInput>>;
  delete?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Result object for bulk create/delete highlights mutation.
 * Mutation is atomic -- if there is a response, all operations
 * were successful.
 *
 * The corresponding result array will be empty, but present, if there
 * were no requests for created/deleted.
 */
export type BatchWriteHighlightsResult = {
  __typename?: 'BatchWriteHighlightsResult';
  created: Array<Highlight>;
  deleted: Array<Scalars['ID']['output']>;
};

/** Input for creating a new User-highlighted passage on a SavedItem. */
export type CreateHighlightByUrlInput = {
  /**
   * Optionally, a client-generated UUID to identify the highlight.
   * If one is not passed, it will be created. Must be in UUID format,
   * or will fail generation. Will not overwrite existing data if there
   * is an ID collision.
   */
  id?: InputMaybe<Scalars['String']['input']>;
  /** Optional note generated by User */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Patch string generated by 'DiffMatchPatch' library, serialized
   * into text via `patch_toText` method.
   * Format is similar to UniDiff but is character-based.
   * The patched text depends on version. For example, the version 2
   * patch surrounds the highlighted text portion with a pair of
   * sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
   * Reference: https://github.com/google/diff-match-patch
   */
  patch: Scalars['String']['input'];
  /**
   * The full text of the highlighted passage. Used as a fallback for
   * rendering highlight if the patch fails.
   */
  quote: Scalars['String']['input'];
  /** The url of the Item that should be annotated in the User's list */
  url: Scalars['ValidUrl']['input'];
  /** Annotation data version */
  version: Scalars['Int']['input'];
};

/** Input for creating a new User-highlighted passage on a SavedItem. */
export type CreateHighlightInput = {
  /**
   * Optionally, a client-generated UUID to identify the highlight.
   * If one is not passed, it will be created. Must be in UUID format,
   * or will fail generation. Will not overwrite existing data if there
   * is an ID collision.
   */
  id?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the Item that should be annotated in the User's list */
  itemId: Scalars['ID']['input'];
  /** Optional note generated by User */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Patch string generated by 'DiffMatchPatch' library, serialized
   * into text via `patch_toText` method.
   * Format is similar to UniDiff but is character-based.
   * The patched text depends on version. For example, the version 2
   * patch surrounds the highlighted text portion with a pair of
   * sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
   * Reference: https://github.com/google/diff-match-patch
   */
  patch: Scalars['String']['input'];
  /**
   * The full text of the highlighted passage. Used as a fallback for
   * rendering highlight if the patch fails.
   */
  quote: Scalars['String']['input'];
  /** Annotation data version */
  version: Scalars['Int']['input'];
};

/** A User-highlighted passage on a SavedItem */
export type Highlight = {
  __typename?: 'Highlight';
  /** When the Highlight was created */
  _createdAt: Scalars['Timestamp']['output'];
  /** When the highlight was last updated */
  _updatedAt: Scalars['Timestamp']['output'];
  /** The ID for this Highlight annotation */
  id: Scalars['ID']['output'];
  /** Highlight Note associated with this Highlight */
  note?: Maybe<HighlightNote>;
  /**
   * Patch string generated by 'DiffMatchPatch' library, serialized
   * into text via `patch_toText` method. Use `patch_fromText` to
   * deserialize into an object that can be used by the DiffMatchPatch
   * library. Format is similar to UniDiff but is character-based.
   * The patched text depends on version. For example, the version 2
   * patch surrounds the highlighted text portion with a pair of
   * sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
   * Reference: https://github.com/google/diff-match-patch
   */
  patch: Scalars['String']['output'];
  /**
   * The full text of the highlighted passage. Used as a fallback for
   * rendering highlight if the patch fails.
   */
  quote: Scalars['String']['output'];
  /** Version number for highlight data specification */
  version: Scalars['Int']['output'];
};

export type HighlightNote = {
  __typename?: 'HighlightNote';
  /** When the HighlightNote was created */
  _createdAt: Scalars['Timestamp']['output'];
  /** When the HighlightNote was last updated */
  _updatedAt: Scalars['Timestamp']['output'];
  /** User entered text */
  text: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /**
   * Make requests to create and delete highlights in a single batch.
   * Mutation is atomic -- if there is a response, all operations were successful.
   */
  batchWriteHighlights: BatchWriteHighlightsResult;
  /** Create new highlight annotation(s). Returns the data for the created Highlight object. */
  createHighlightByUrl: Highlight;
  /** Create new highlight note. Returns the data for the created Highlight note. */
  createSavedItemHighlightNote?: Maybe<HighlightNote>;
  /** Create new highlight annotation(s). Returns the data for the created Highlight object(s). */
  createSavedItemHighlights: Array<Highlight>;
  /** Delete a highlight by its ID. */
  deleteSavedItemHighlight: Scalars['ID']['output'];
  /** Delete a highlight note by the Highlight ID. */
  deleteSavedItemHighlightNote: Scalars['ID']['output'];
  /**
   * Update an existing highlight annotation, by its ID.
   * If the given highlight ID does not exist, will return error data
   * and the highlight will not be created.
   */
  updateHighlight: Highlight;
  /**
   * Update an existing highlight annotation, by its ID.
   * If the given highlight ID does not exist, will return error data
   * and the highlight will not be created.
   * Note that if an ID is passed to the optional ID field in CreateHighlightInput,
   * it will be ignored, as this mutation does not allow updating the ID.
   * @deprecated use updateHighlight
   */
  updateSavedItemHighlight: Highlight;
  /**
   * Update an existing highlight note, by its ID.
   * If the given highlight ID does not exist, will return error data
   * and the note will not be updated.
   */
  updateSavedItemHighlightNote?: Maybe<HighlightNote>;
};


export type MutationbatchWriteHighlightsArgs = {
  input?: InputMaybe<BatchWriteHighlightsInput>;
};


export type MutationcreateHighlightByUrlArgs = {
  input: CreateHighlightByUrlInput;
};


export type MutationcreateSavedItemHighlightNoteArgs = {
  id: Scalars['ID']['input'];
  input: Scalars['String']['input'];
};


export type MutationcreateSavedItemHighlightsArgs = {
  input: Array<CreateHighlightInput>;
};


export type MutationdeleteSavedItemHighlightArgs = {
  id: Scalars['ID']['input'];
};


export type MutationdeleteSavedItemHighlightNoteArgs = {
  id: Scalars['ID']['input'];
};


export type MutationupdateHighlightArgs = {
  id: Scalars['ID']['input'];
  input: UpdateHighlightInput;
};


export type MutationupdateSavedItemHighlightArgs = {
  id: Scalars['ID']['input'];
  input: CreateHighlightInput;
};


export type MutationupdateSavedItemHighlightNoteArgs = {
  id: Scalars['ID']['input'];
  input: Scalars['String']['input'];
};

export type SavedItem = {
  __typename?: 'SavedItem';
  /** Annotations associated to this SavedItem */
  annotations?: Maybe<SavedItemAnnotations>;
  id: Scalars['ID']['output'];
};

/**
 * Container for all annotations associated to a SavedItem.
 * Can be extended when more types of annotations are added.
 */
export type SavedItemAnnotations = {
  __typename?: 'SavedItemAnnotations';
  /** User-highlighted passages on a SavedItem */
  highlights?: Maybe<Array<Maybe<Highlight>>>;
};

export type UpdateHighlightInput = {
  /** The ID of the Item that should be annotated in the User's list */
  itemId: Scalars['ID']['input'];
  /** Optional note generated by User */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Patch string generated by 'DiffMatchPatch' library, serialized
   * into text via `patch_toText` method.
   * Format is similar to UniDiff but is character-based.
   * The patched text depends on version. For example, the version 2
   * patch surrounds the highlighted text portion with a pair of
   * sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
   * Reference: https://github.com/google/diff-match-patch
   */
  patch: Scalars['String']['input'];
  /**
   * The full text of the highlighted passage. Used as a fallback for
   * rendering highlight if the patch fails.
   */
  quote: Scalars['String']['input'];
  /** Annotation data version */
  version: Scalars['Int']['input'];
};

export type User = {
  __typename?: 'User';
  /** User id, provided by the user service. */
  id: Scalars['ID']['output'];
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;

export type ReferenceResolver<TResult, TReference, TContext> = (
      reference: TReference,
      context: TContext,
      info: GraphQLResolveInfo
    ) => Promise<TResult> | TResult;

      type ScalarCheck<T, S> = S extends true ? T : NullableCheck<T, S>;
      type NullableCheck<T, S> = Maybe<T> extends T ? Maybe<ListCheck<NonNullable<T>, S>> : ListCheck<T, S>;
      type ListCheck<T, S> = T extends (infer U)[] ? NullableCheck<U, S>[] : GraphQLRecursivePick<T, S>;
      export type GraphQLRecursivePick<T, S> = { [K in keyof T & keyof S]: ScalarCheck<T[K], S[K]> };
    

export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;



/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  BatchWriteHighlightsInput: BatchWriteHighlightsInput;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  BatchWriteHighlightsResult: ResolverTypeWrapper<BatchWriteHighlightsResult>;
  CreateHighlightByUrlInput: CreateHighlightByUrlInput;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  CreateHighlightInput: CreateHighlightInput;
  Highlight: ResolverTypeWrapper<Highlight>;
  HighlightNote: ResolverTypeWrapper<HighlightNote>;
  Mutation: ResolverTypeWrapper<{}>;
  SavedItem: ResolverTypeWrapper<SavedItem>;
  SavedItemAnnotations: ResolverTypeWrapper<SavedItemAnnotations>;
  Timestamp: ResolverTypeWrapper<Scalars['Timestamp']['output']>;
  UpdateHighlightInput: UpdateHighlightInput;
  User: ResolverTypeWrapper<User>;
  ValidUrl: ResolverTypeWrapper<Scalars['ValidUrl']['output']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  BatchWriteHighlightsInput: BatchWriteHighlightsInput;
  ID: Scalars['ID']['output'];
  BatchWriteHighlightsResult: BatchWriteHighlightsResult;
  CreateHighlightByUrlInput: CreateHighlightByUrlInput;
  String: Scalars['String']['output'];
  Int: Scalars['Int']['output'];
  CreateHighlightInput: CreateHighlightInput;
  Highlight: Highlight;
  HighlightNote: HighlightNote;
  Mutation: {};
  SavedItem: SavedItem;
  SavedItemAnnotations: SavedItemAnnotations;
  Timestamp: Scalars['Timestamp']['output'];
  UpdateHighlightInput: UpdateHighlightInput;
  User: User;
  ValidUrl: Scalars['ValidUrl']['output'];
  Boolean: Scalars['Boolean']['output'];
}>;

export type BatchWriteHighlightsResultResolvers<ContextType = IContext, ParentType extends ResolversParentTypes['BatchWriteHighlightsResult'] = ResolversParentTypes['BatchWriteHighlightsResult']> = ResolversObject<{
  created?: Resolver<Array<ResolversTypes['Highlight']>, ParentType, ContextType>;
  deleted?: Resolver<Array<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type HighlightResolvers<ContextType = IContext, ParentType extends ResolversParentTypes['Highlight'] = ResolversParentTypes['Highlight']> = ResolversObject<{
  _createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  _updatedAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  note?: Resolver<Maybe<ResolversTypes['HighlightNote']>, ParentType, ContextType>;
  patch?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quote?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  version?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type HighlightNoteResolvers<ContextType = IContext, ParentType extends ResolversParentTypes['HighlightNote'] = ResolversParentTypes['HighlightNote']> = ResolversObject<{
  _createdAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  _updatedAt?: Resolver<ResolversTypes['Timestamp'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MutationResolvers<ContextType = IContext, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{
  batchWriteHighlights?: Resolver<ResolversTypes['BatchWriteHighlightsResult'], ParentType, ContextType, Partial<MutationbatchWriteHighlightsArgs>>;
  createHighlightByUrl?: Resolver<ResolversTypes['Highlight'], ParentType, ContextType, RequireFields<MutationcreateHighlightByUrlArgs, 'input'>>;
  createSavedItemHighlightNote?: Resolver<Maybe<ResolversTypes['HighlightNote']>, ParentType, ContextType, RequireFields<MutationcreateSavedItemHighlightNoteArgs, 'id' | 'input'>>;
  createSavedItemHighlights?: Resolver<Array<ResolversTypes['Highlight']>, ParentType, ContextType, RequireFields<MutationcreateSavedItemHighlightsArgs, 'input'>>;
  deleteSavedItemHighlight?: Resolver<ResolversTypes['ID'], ParentType, ContextType, RequireFields<MutationdeleteSavedItemHighlightArgs, 'id'>>;
  deleteSavedItemHighlightNote?: Resolver<ResolversTypes['ID'], ParentType, ContextType, RequireFields<MutationdeleteSavedItemHighlightNoteArgs, 'id'>>;
  updateHighlight?: Resolver<ResolversTypes['Highlight'], ParentType, ContextType, RequireFields<MutationupdateHighlightArgs, 'id' | 'input'>>;
  updateSavedItemHighlight?: Resolver<ResolversTypes['Highlight'], ParentType, ContextType, RequireFields<MutationupdateSavedItemHighlightArgs, 'id' | 'input'>>;
  updateSavedItemHighlightNote?: Resolver<Maybe<ResolversTypes['HighlightNote']>, ParentType, ContextType, RequireFields<MutationupdateSavedItemHighlightNoteArgs, 'id' | 'input'>>;
}>;

export type SavedItemResolvers<ContextType = IContext, ParentType extends ResolversParentTypes['SavedItem'] = ResolversParentTypes['SavedItem']> = ResolversObject<{
  __resolveReference?: ReferenceResolver<Maybe<ResolversTypes['SavedItem']>, { __typename: 'SavedItem' } & GraphQLRecursivePick<ParentType, {"id":true}>, ContextType>;
  annotations?: Resolver<Maybe<ResolversTypes['SavedItemAnnotations']>, { __typename: 'SavedItem' } & GraphQLRecursivePick<ParentType, {"id":true}>, ContextType>;

  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SavedItemAnnotationsResolvers<ContextType = IContext, ParentType extends ResolversParentTypes['SavedItemAnnotations'] = ResolversParentTypes['SavedItemAnnotations']> = ResolversObject<{
  highlights?: Resolver<Maybe<Array<Maybe<ResolversTypes['Highlight']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface TimestampScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Timestamp'], any> {
  name: 'Timestamp';
}

export type UserResolvers<ContextType = IContext, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = ResolversObject<{
  __resolveReference?: ReferenceResolver<Maybe<ResolversTypes['User']>, { __typename: 'User' } & GraphQLRecursivePick<ParentType, {"id":true}>, ContextType>;

  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ValidUrlScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ValidUrl'], any> {
  name: 'ValidUrl';
}

export type Resolvers<ContextType = IContext> = ResolversObject<{
  BatchWriteHighlightsResult?: BatchWriteHighlightsResultResolvers<ContextType>;
  Highlight?: HighlightResolvers<ContextType>;
  HighlightNote?: HighlightNoteResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  SavedItem?: SavedItemResolvers<ContextType>;
  SavedItemAnnotations?: SavedItemAnnotationsResolvers<ContextType>;
  Timestamp?: GraphQLScalarType;
  User?: UserResolvers<ContextType>;
  ValidUrl?: GraphQLScalarType;
}>;

