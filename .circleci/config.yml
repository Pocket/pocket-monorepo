version: 2.1

# this allows you to use CircleCI's dynamic configuration feature
setup: true

orbs:
  path-filtering: circleci/path-filtering@1.0.0
  continuation: circleci/continuation@1.0.0

# our defined job, and its steps
jobs:
  setup:
    executor: path-filtering/default
    steps:
      - checkout # checkout code
      - run:
          name: Generate List of Configs to Merge
          command: |
            # Generate a list of all the circleci configs we want to run
            file_list=(".circleci/common.yml" ".circleci/repo-jobs.yml" ".circleci/image-api.yml" ".circleci/annotations-api.yml" ".circleci/shared-snowplow-consumer.yml" ".circleci/parser-graphql-wrapper.yml" ".circleci/transactional-emails.yml" ".circleci/fxa-webhook-proxy.yml" ".circleci/user-api.yml" ".circleci/client-api.yml" ".circleci/list-api.yml" ".circleci/feature-flags.yml" ".circleci/sendgrid-data.yml" ".circleci/account-data-deleter.yml" ".circleci/account-delete-monitor.yml" ".circleci/shareable-lists-api.yml" ".circleci/pocket-event-bridge.yml" ".circleci/user-list-search.yml" ".circleci/braze.yml" ".circleci/v3-proxy-api.yml" ".circleci/push-server.yml")       
            touch /tmp/configs.txt

            # Add file header to each file and dump it to the config list
            for file in "${file_list[@]}"; do
              echo "$file" >> /tmp/configs.txt
              awk -v new_content="$(cat .circleci/header.yml)" 'BEGIN {print new_content} {print}' "$file" > temp_file && mv temp_file "$file"
            done
      - path-filtering/generate-config:
          config-list-path: /tmp/configs.txt
          generated-config-path: /tmp/generated-config.yml
      - run:
          name: Reset Git
          command: |
            git reset --hard
      # Set up path mapping, in the future we should generate this as a conf file, and pass it to the option.
      # We will need to set this to true when ever the packages folder changes as well.
      # Right now though, we will only deploy if the actual servers/infra change,
      # as its likely any change in the packages will change the underlying code.
      # Worst case, bump the version in package.json to triger a deploy
      #
      # The router is just rhai scripts and yaml files without dependencies on node or any other
      # packages, so we don't trigger it unless a change occurs specifically in the subfolder
      #
      # NOTE: we use _ for the parameters to the pipeline because
      # circleci uses it as an ENV down the pipe and ENV vars can't be used with a -
      - path-filtering/set-parameters:
          config-path: /tmp/generated-config.yml
          output-path: /tmp/pipeline-parameters.json
          mapping: |
            ((servers|infrastructure)/image-api/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) image_api true
            ((servers|infrastructure|lambdas)/annotations-api.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) annotations_api true
            ((servers|infrastructure)/shared-snowplow-consumer/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) shared_snowplow_consumer true
            ((servers|infrastructure)/parser-graphql-wrapper/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) parser_graphql_wrapper true
            ((lambdas|infrastructure)/transactional-emails.*)|(packages/.*)|(pnpm-lock\.yaml)|(.circleci/common.yml) transactional_emails true
            ((lambdas|infrastructure)/fxa-webhook-proxy-.*)|(packages/.*)|(pnpm-lock\.yaml)|(.circleci/common.yml) fxa_webhook_proxy true
            ((servers|infrastructure)/user-api/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) user_api true
            ((servers|infrastructure)/list-api/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) list_api true
            ((servers|infrastructure)/client-api/.*)|(.circleci/common.yml) client_api true
            ((servers|infrastructure)/feature-flags/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) feature_flags true
            ((lambdas|infrastructure)/sendgrid-data/.*)|(.circleci/common.yml) sendgrid_data true
            ((lambdas|infrastructure|servers)/account-data-deleter/.*)|(packages/.*)|(pnpm-lock\.yaml)|(.circleci/account-data-deleter.yml)|(.circleci/common.yml) account_data_deleter true
            ((lambdas|infrastructure)/account-delete-monitor/.*)|(packages/.*)|(pnpm-lock\.yaml)|(.circleci/account-delete-monitor.yml)|(.circleci/common.yml) account_delete_monitor true
            ((servers|infrastructure|lambdas)/shareable-lists-api/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/common.yml) shareable_lists_api true
            ((infrastructure)/pocket-event-bridge/.*)|(packages/.*)|(pnpm-lock\.yaml)|(.circleci/pocket-event-bridge.yml)|(.circleci/common.yml) pocket_event_bridge true
            ((servers|infrastructure|lambdas)/user-list-search.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/user-list-search.yml)|(.circleci/common.yml) user_list_search true
            ((infrastructure)/braze/.*)|(packages/.*)|(pnpm-lock\.yaml)|(.circleci/braze.yml)|(.circleci/common.yml) braze true
            ((servers|infrastructure)/v3-proxy-api/.*)|(packages/.*)|(pnpm-lock\.yaml)|(.circleci/v3-proxy-api.yml)|(.circleci/common.yml) v3_proxy_api true
            ((servers|infrastructure)/push-server/.*)|(packages/.*)|(pnpm-lock\.yaml)|(Dockerfile)|(.circleci/push-server.yml)|(.circleci/common.yml) push_server true

      - continuation/continue:
          configuration_path: /tmp/generated-config.yml
          parameters: /tmp/pipeline-parameters.json

# our single workflow, that triggers the setup job defined above
workflows:
  setup:
    jobs:
      - setup
